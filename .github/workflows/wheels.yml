on: push

name: Build wheels

jobs:
  build_wheels:
    name: Build wheels for ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: manylinux-x86_64
            os: ubuntu-latest
            shell: bash
          - name: macos-x86_64
            os: macos-13
            macos-target: 10.13
            shell: bash
          - name: macos-arm64
            os: macos-14
            macos-target: 11
            shell: bash
          - name: windows-x86_64
            os: windows-latest
            shell: 'msys2 {0}'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: msys2/setup-msys2@v2
      if: runner.os == 'Windows'
      with:
        msystem: mingw64
        path-type: inherit
        install: |
          make
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gmp

    - name: Create pyproject.toml
      if: runner.os != 'Windows'
      shell: bash
      run: |
        mkdir -p build/src/api/python
        cp src/api/python/pyproject.toml build/src/api/python/

    - name: Create pyproject.toml
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        mkdir -p build/src/api/python
        cp src/api/python/pyproject.toml build/src/api/python/

    - name: Store MinGW64 path
      if: runner.os == 'Windows'
      id: mingw64-path
      shell: msys2 {0}
      run: echo "bin=$(cygpath -m $(dirname $(which gcc)))" >> $GITHUB_OUTPUT

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.5
      with:
        package-dir: ./build/src/api/python/
        config-file: ./build/src/api/python/pyproject.toml
      env:
        CIBW_SKIP: "cp36-* pp*-win* *-win32 *-manylinux_i686 *-musllinux_*"
        CIBW_BEFORE_ALL_LINUX: bash ./contrib/cibw/before_all_linux.sh
        CIBW_BEFORE_ALL_MACOS: bash ./contrib/cibw/before_all_macos.sh
        CIBW_BEFORE_ALL_WINDOWS: msys2 -c ./contrib/cibw/before_all_windows.sh
        # Use delvewheel on windows
        CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >
          delvewheel repair -w {dest_dir} {wheel} --add-path "${{ github.workspace }}\install\lib;${{ steps.mingw64-path.outputs.bin }}"
        CIBW_ENVIRONMENT_LINUX: >
          CPLUS_INCLUDE_PATH="$(pwd)/install/include"
          LIBRARY_PATH="$(pwd)/install/lib64"
          LD_LIBRARY_PATH="$(pwd)/install/lib64:$LD_LIBRARY_PATH"
        CIBW_ENVIRONMENT_MACOS: >
          CPLUS_INCLUDE_PATH="$(pwd)/install/include"
          LIBRARY_PATH="$(pwd)/install/lib"
          DYLD_LIBRARY_PATH="$(pwd)/install/lib:$DYLD_LIBRARY_PATH"
          MACOSX_DEPLOYMENT_TARGET=${{ matrix.macos-target }}

    - uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl
